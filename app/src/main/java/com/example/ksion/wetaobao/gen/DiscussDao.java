package com.example.ksion.wetaobao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ksion.wetaobao.bean.Discuss;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISCUSS".
*/
public class DiscussDao extends AbstractDao<Discuss, Void> {

    public static final String TABLENAME = "DISCUSS";

    /**
     * Properties of entity Discuss.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GoodsId = new Property(0, String.class, "goodsId", false, "GOODS_ID");
        public final static Property DiscussText = new Property(1, String.class, "discussText", false, "DISCUSS_TEXT");
        public final static Property DiscussUserId = new Property(2, String.class, "discussUserId", false, "DISCUSS_USER_ID");
        public final static Property DiscussTime = new Property(3, String.class, "discussTime", false, "DISCUSS_TIME");
    }


    public DiscussDao(DaoConfig config) {
        super(config);
    }
    
    public DiscussDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISCUSS\" (" + //
                "\"GOODS_ID\" TEXT," + // 0: goodsId
                "\"DISCUSS_TEXT\" TEXT," + // 1: discussText
                "\"DISCUSS_USER_ID\" TEXT," + // 2: discussUserId
                "\"DISCUSS_TIME\" TEXT);"); // 3: discussTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISCUSS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Discuss entity) {
        stmt.clearBindings();
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(1, goodsId);
        }
 
        String discussText = entity.getDiscussText();
        if (discussText != null) {
            stmt.bindString(2, discussText);
        }
 
        String discussUserId = entity.getDiscussUserId();
        if (discussUserId != null) {
            stmt.bindString(3, discussUserId);
        }
 
        String discussTime = entity.getDiscussTime();
        if (discussTime != null) {
            stmt.bindString(4, discussTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Discuss entity) {
        stmt.clearBindings();
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(1, goodsId);
        }
 
        String discussText = entity.getDiscussText();
        if (discussText != null) {
            stmt.bindString(2, discussText);
        }
 
        String discussUserId = entity.getDiscussUserId();
        if (discussUserId != null) {
            stmt.bindString(3, discussUserId);
        }
 
        String discussTime = entity.getDiscussTime();
        if (discussTime != null) {
            stmt.bindString(4, discussTime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Discuss readEntity(Cursor cursor, int offset) {
        Discuss entity = new Discuss( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // goodsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // discussText
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // discussUserId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // discussTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Discuss entity, int offset) {
        entity.setGoodsId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDiscussText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiscussUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDiscussTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Discuss entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Discuss entity) {
        return null;
    }

    @Override
    public boolean hasKey(Discuss entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
