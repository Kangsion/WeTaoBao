package com.example.ksion.wetaobao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ksion.wetaobao.util.StringConverter;
import java.util.List;

import com.example.ksion.wetaobao.bean.Goods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS".
*/
public class GoodsDao extends AbstractDao<Goods, Void> {

    public static final String TABLENAME = "GOODS";

    /**
     * Properties of entity Goods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GoodsName = new Property(0, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property GoodsTypeId = new Property(1, String.class, "goodsTypeId", false, "GOODS_TYPE_ID");
        public final static Property GoodsImgs = new Property(2, int.class, "goodsImgs", false, "GOODS_IMGS");
        public final static Property GoodsPrice = new Property(3, double.class, "goodsPrice", false, "GOODS_PRICE");
        public final static Property GoodsAddress = new Property(4, String.class, "goodsAddress", false, "GOODS_ADDRESS");
        public final static Property LoveUserIds = new Property(5, String.class, "loveUserIds", false, "LOVE_USER_IDS");
    }

    private final StringConverter loveUserIdsConverter = new StringConverter();

    public GoodsDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS\" (" + //
                "\"GOODS_NAME\" TEXT NOT NULL ," + // 0: goodsName
                "\"GOODS_TYPE_ID\" TEXT," + // 1: goodsTypeId
                "\"GOODS_IMGS\" INTEGER NOT NULL ," + // 2: goodsImgs
                "\"GOODS_PRICE\" REAL NOT NULL ," + // 3: goodsPrice
                "\"GOODS_ADDRESS\" TEXT," + // 4: goodsAddress
                "\"LOVE_USER_IDS\" TEXT);"); // 5: loveUserIds
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Goods entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getGoodsName());
 
        String goodsTypeId = entity.getGoodsTypeId();
        if (goodsTypeId != null) {
            stmt.bindString(2, goodsTypeId);
        }
        stmt.bindLong(3, entity.getGoodsImgs());
        stmt.bindDouble(4, entity.getGoodsPrice());
 
        String goodsAddress = entity.getGoodsAddress();
        if (goodsAddress != null) {
            stmt.bindString(5, goodsAddress);
        }
 
        List loveUserIds = entity.getLoveUserIds();
        if (loveUserIds != null) {
            stmt.bindString(6, loveUserIdsConverter.convertToDatabaseValue(loveUserIds));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Goods entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getGoodsName());
 
        String goodsTypeId = entity.getGoodsTypeId();
        if (goodsTypeId != null) {
            stmt.bindString(2, goodsTypeId);
        }
        stmt.bindLong(3, entity.getGoodsImgs());
        stmt.bindDouble(4, entity.getGoodsPrice());
 
        String goodsAddress = entity.getGoodsAddress();
        if (goodsAddress != null) {
            stmt.bindString(5, goodsAddress);
        }
 
        List loveUserIds = entity.getLoveUserIds();
        if (loveUserIds != null) {
            stmt.bindString(6, loveUserIdsConverter.convertToDatabaseValue(loveUserIds));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Goods readEntity(Cursor cursor, int offset) {
        Goods entity = new Goods( //
            cursor.getString(offset + 0), // goodsName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodsTypeId
            cursor.getInt(offset + 2), // goodsImgs
            cursor.getDouble(offset + 3), // goodsPrice
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goodsAddress
            cursor.isNull(offset + 5) ? null : loveUserIdsConverter.convertToEntityProperty(cursor.getString(offset + 5)) // loveUserIds
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Goods entity, int offset) {
        entity.setGoodsName(cursor.getString(offset + 0));
        entity.setGoodsTypeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsImgs(cursor.getInt(offset + 2));
        entity.setGoodsPrice(cursor.getDouble(offset + 3));
        entity.setGoodsAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLoveUserIds(cursor.isNull(offset + 5) ? null : loveUserIdsConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Goods entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Goods entity) {
        return null;
    }

    @Override
    public boolean hasKey(Goods entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
