package com.example.ksion.wetaobao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ksion.wetaobao.bean.GoodsType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_TYPE".
*/
public class GoodsTypeDao extends AbstractDao<GoodsType, String> {

    public static final String TABLENAME = "GOODS_TYPE";

    /**
     * Properties of entity GoodsType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TypeName = new Property(0, String.class, "typeName", true, "TYPE_NAME");
        public final static Property TypeImg = new Property(1, Integer.class, "typeImg", false, "TYPE_IMG");
    }


    public GoodsTypeDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_TYPE\" (" + //
                "\"TYPE_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: typeName
                "\"TYPE_IMG\" INTEGER);"); // 1: typeImg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsType entity) {
        stmt.clearBindings();
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(1, typeName);
        }
 
        Integer typeImg = entity.getTypeImg();
        if (typeImg != null) {
            stmt.bindLong(2, typeImg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsType entity) {
        stmt.clearBindings();
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(1, typeName);
        }
 
        Integer typeImg = entity.getTypeImg();
        if (typeImg != null) {
            stmt.bindLong(2, typeImg);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GoodsType readEntity(Cursor cursor, int offset) {
        GoodsType entity = new GoodsType( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // typeName
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // typeImg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsType entity, int offset) {
        entity.setTypeName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTypeImg(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GoodsType entity, long rowId) {
        return entity.getTypeName();
    }
    
    @Override
    public String getKey(GoodsType entity) {
        if(entity != null) {
            return entity.getTypeName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsType entity) {
        return entity.getTypeName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
