package com.example.ksion.wetaobao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ksion.wetaobao.util.StringConverter;
import java.util.List;

import com.example.ksion.wetaobao.bean.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, String> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, String.class, "OrderId", true, "ORDER_ID");
        public final static Property GoodIds = new Property(1, String.class, "goodIds", false, "GOOD_IDS");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property OrdersState = new Property(3, int.class, "ordersState", false, "ORDERS_STATE");
        public final static Property OerdersMoney = new Property(4, double.class, "oerdersMoney", false, "OERDERS_MONEY");
        public final static Property GoodsCount = new Property(5, int.class, "goodsCount", false, "GOODS_COUNT");
    }

    private final StringConverter goodIdsConverter = new StringConverter();

    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"ORDER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: OrderId
                "\"GOOD_IDS\" TEXT," + // 1: goodIds
                "\"USER_ID\" TEXT NOT NULL ," + // 2: userId
                "\"ORDERS_STATE\" INTEGER NOT NULL ," + // 3: ordersState
                "\"OERDERS_MONEY\" REAL NOT NULL ," + // 4: oerdersMoney
                "\"GOODS_COUNT\" INTEGER NOT NULL );"); // 5: goodsCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        String OrderId = entity.getOrderId();
        if (OrderId != null) {
            stmt.bindString(1, OrderId);
        }
 
        List goodIds = entity.getGoodIds();
        if (goodIds != null) {
            stmt.bindString(2, goodIdsConverter.convertToDatabaseValue(goodIds));
        }
        stmt.bindString(3, entity.getUserId());
        stmt.bindLong(4, entity.getOrdersState());
        stmt.bindDouble(5, entity.getOerdersMoney());
        stmt.bindLong(6, entity.getGoodsCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        String OrderId = entity.getOrderId();
        if (OrderId != null) {
            stmt.bindString(1, OrderId);
        }
 
        List goodIds = entity.getGoodIds();
        if (goodIds != null) {
            stmt.bindString(2, goodIdsConverter.convertToDatabaseValue(goodIds));
        }
        stmt.bindString(3, entity.getUserId());
        stmt.bindLong(4, entity.getOrdersState());
        stmt.bindDouble(5, entity.getOerdersMoney());
        stmt.bindLong(6, entity.getGoodsCount());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // OrderId
            cursor.isNull(offset + 1) ? null : goodIdsConverter.convertToEntityProperty(cursor.getString(offset + 1)), // goodIds
            cursor.getString(offset + 2), // userId
            cursor.getInt(offset + 3), // ordersState
            cursor.getDouble(offset + 4), // oerdersMoney
            cursor.getInt(offset + 5) // goodsCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoodIds(cursor.isNull(offset + 1) ? null : goodIdsConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setUserId(cursor.getString(offset + 2));
        entity.setOrdersState(cursor.getInt(offset + 3));
        entity.setOerdersMoney(cursor.getDouble(offset + 4));
        entity.setGoodsCount(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Order entity, long rowId) {
        return entity.getOrderId();
    }
    
    @Override
    public String getKey(Order entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getOrderId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
