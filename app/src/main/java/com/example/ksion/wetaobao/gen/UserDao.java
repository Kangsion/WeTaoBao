package com.example.ksion.wetaobao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ksion.wetaobao.util.StringConverter;
import java.util.List;

import com.example.ksion.wetaobao.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "UserId", true, "_id");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property UserHead = new Property(2, String.class, "userHead", false, "USER_HEAD");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property AddressLists = new Property(4, String.class, "addressLists", false, "ADDRESS_LISTS");
        public final static Property Password = new Property(5, String.class, "password", false, "PASSWORD");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
    }

    private final StringConverter addressListsConverter = new StringConverter();

    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: UserId
                "\"NICK_NAME\" TEXT UNIQUE ," + // 1: nickName
                "\"USER_HEAD\" TEXT," + // 2: userHead
                "\"SEX\" TEXT," + // 3: sex
                "\"ADDRESS_LISTS\" TEXT," + // 4: addressLists
                "\"PASSWORD\" TEXT NOT NULL ," + // 5: password
                "\"PHONE\" TEXT NOT NULL );"); // 6: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(1, UserId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(3, userHead);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        List addressLists = entity.getAddressLists();
        if (addressLists != null) {
            stmt.bindString(5, addressListsConverter.convertToDatabaseValue(addressLists));
        }
        stmt.bindString(6, entity.getPassword());
        stmt.bindString(7, entity.getPhone());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(1, UserId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(3, userHead);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        List addressLists = entity.getAddressLists();
        if (addressLists != null) {
            stmt.bindString(5, addressListsConverter.convertToDatabaseValue(addressLists));
        }
        stmt.bindString(6, entity.getPassword());
        stmt.bindString(7, entity.getPhone());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // UserId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userHead
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : addressListsConverter.convertToEntityProperty(cursor.getString(offset + 4)), // addressLists
            cursor.getString(offset + 5), // password
            cursor.getString(offset + 6) // phone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserHead(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddressLists(cursor.isNull(offset + 4) ? null : addressListsConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setPassword(cursor.getString(offset + 5));
        entity.setPhone(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
